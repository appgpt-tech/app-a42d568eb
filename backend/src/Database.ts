//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { DepartmentsEntity } from './db/Departments.entity';
import { InitiativesEntity } from './db/Initiatives.entity';
import { GoalsEntity } from './db/Goals.entity';
import { EmissionSourcesEntity } from './db/EmissionSources.entity';
import { ResourceUsageEntity } from './db/ResourceUsage.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      DepartmentsEntity,
      InitiativesEntity,
      GoalsEntity,
      EmissionSourcesEntity,
      ResourceUsageEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          userName: 'userName 1',
          department: 1,
          password: 'password 1',
          email: 'email 1',
          id: 32,
        },
        {
          userName: 'userName 2',
          department: 2,
          password: 'password 2',
          email: 'email 2',
          id: 42,
        },
        {
          userName: 'userName 3',
          department: 3,
          password: 'password 3',
          email: 'email 3',
          id: 62,
        },
        {
          userName: 'userName 4',
          department: 4,
          password: 'password 4',
          email: 'email 4',
          id: 84,
        },
        {
          userName: 'userName 5',
          department: 5,
          password: 'password 5',
          email: 'email 5',
          id: 74,
        },
      ],
      Departments: [
        { departmentName: 'departmentName 1', departmentHead: 1, id: 5 },
        { departmentName: 'departmentName 2', departmentHead: 2, id: 60 },
        { departmentName: 'departmentName 3', departmentHead: 3, id: 91 },
        { departmentName: 'departmentName 4', departmentHead: 4, id: 77 },
        { departmentName: 'departmentName 5', departmentHead: 5, id: 63 },
      ],
      Initiatives: [
        {
          name: 'name 1',
          description: 'description 1',
          startDate: '2024-12-15T12:57:54.849Z',
          endDate: '2023-08-15T22:49:47.266Z',
          relatedDepartment: 1,
          status: 'status 1',
          id: 18,
        },
        {
          name: 'name 2',
          description: 'description 2',
          startDate: '2023-06-27T02:45:57.048Z',
          endDate: '2023-11-05T04:26:11.291Z',
          relatedDepartment: 2,
          status: 'status 2',
          id: 44,
        },
        {
          name: 'name 3',
          description: 'description 3',
          startDate: '2023-09-24T04:20:05.830Z',
          endDate: '2024-08-20T19:49:57.392Z',
          relatedDepartment: 3,
          status: 'status 3',
          id: 64,
        },
        {
          name: 'name 4',
          description: 'description 4',
          startDate: '2024-05-31T17:00:28.366Z',
          endDate: '2024-01-14T06:11:47.747Z',
          relatedDepartment: 4,
          status: 'status 4',
          id: 68,
        },
        {
          name: 'name 5',
          description: 'description 5',
          startDate: '2024-09-19T08:56:25.719Z',
          endDate: '2024-05-02T06:41:50.343Z',
          relatedDepartment: 5,
          status: 'status 5',
          id: 38,
        },
      ],
      Goals: [
        {
          name: 'name 1',
          description: 'description 1',
          targetDate: '2024-04-19T05:14:53.947Z',
          relatedDepartment: 1,
          status: 'status 1',
          id: 38,
        },
        {
          name: 'name 2',
          description: 'description 2',
          targetDate: '2025-04-14T12:32:49.344Z',
          relatedDepartment: 2,
          status: 'status 2',
          id: 4,
        },
        {
          name: 'name 3',
          description: 'description 3',
          targetDate: '2024-02-28T14:00:59.397Z',
          relatedDepartment: 3,
          status: 'status 3',
          id: 35,
        },
        {
          name: 'name 4',
          description: 'description 4',
          targetDate: '2023-10-09T01:45:29.378Z',
          relatedDepartment: 4,
          status: 'status 4',
          id: 92,
        },
        {
          name: 'name 5',
          description: 'description 5',
          targetDate: '2024-04-12T14:53:26.499Z',
          relatedDepartment: 5,
          status: 'status 5',
          id: 85,
        },
      ],
      EmissionSources: [
        {
          sourceType: 'sourceType 1',
          quantityUsed: 0.15,
          emissionFactors: 0.12,
          totalEmissions: 0.02,
          id: 85,
        },
        {
          sourceType: 'sourceType 2',
          quantityUsed: 0.5,
          emissionFactors: 0.49,
          totalEmissions: 0.66,
          id: 73,
        },
        {
          sourceType: 'sourceType 3',
          quantityUsed: 0.21,
          emissionFactors: 0.04,
          totalEmissions: 0.56,
          id: 52,
        },
        {
          sourceType: 'sourceType 4',
          quantityUsed: 0.25,
          emissionFactors: 0.5,
          totalEmissions: 0.41,
          id: 9,
        },
        {
          sourceType: 'sourceType 5',
          quantityUsed: 0.51,
          emissionFactors: 0.5,
          totalEmissions: 0.03,
          id: 17,
        },
      ],
      ResourceUsage: [
        {
          resourceType: 'resourceType 1',
          quantityConsumed: 0.51,
          unitOfMeasurement: 'unitOfMeasurement 1',
          periodOfConsumption: '2023-09-01T10:02:40.475Z',
          id: 22,
        },
        {
          resourceType: 'resourceType 2',
          quantityConsumed: 0.68,
          unitOfMeasurement: 'unitOfMeasurement 2',
          periodOfConsumption: '2024-01-13T19:31:40.543Z',
          id: 23,
        },
        {
          resourceType: 'resourceType 3',
          quantityConsumed: 1,
          unitOfMeasurement: 'unitOfMeasurement 3',
          periodOfConsumption: '2023-09-03T02:21:36.611Z',
          id: 58,
        },
        {
          resourceType: 'resourceType 4',
          quantityConsumed: 0.5,
          unitOfMeasurement: 'unitOfMeasurement 4',
          periodOfConsumption: '2023-07-12T04:36:08.372Z',
          id: 56,
        },
        {
          resourceType: 'resourceType 5',
          quantityConsumed: 0.33,
          unitOfMeasurement: 'unitOfMeasurement 5',
          periodOfConsumption: '2024-02-16T05:30:02.884Z',
          id: 70,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('DepartmentsEntity', data.Departments);
      await this.SeedResource('InitiativesEntity', data.Initiatives);
      await this.SeedResource('GoalsEntity', data.Goals);
      await this.SeedResource('EmissionSourcesEntity', data.EmissionSources);
      await this.SeedResource('ResourceUsageEntity', data.ResourceUsage);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
